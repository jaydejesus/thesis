/* 
 * Copyright 2010 Aalto University, ComNet
 * Released under GPLv3. See LICENSE.txt for details. 
 */

package applications;

import java.util.Random;

import report.TrafficAppReporter;
import core.Application;
import core.DTNHost;
import core.Message;
import core.Settings;
import core.SimClock;
import core.SimScenario;
import core.World;

/**
 * Simple ping application to demonstrate the application support. The 
 * application can be configured to send pings with a fixed interval or to only
 * answer to pings it receives. When the application receives a ping it sends
 * a pong message in response.
 * 
 * The corresponding <code>TrafficAppReporter</code> class can be used to record
 * information about the application behavior.
 * 
 * @see TrafficAppReporter
 * @author teemuk
 */
public class TrafficApplication extends Application{
	/** Run in passive mode - don't generate pings but respond */
	public static final String TRAFFIC_PASSIVE = "passive";
	/** Ping generation interval */
	public static final String TRAFFIC_INTERVAL = "interval";
	/** Ping interval offset - avoids synchronization of ping sending */
	public static final String TRAFFIC_OFFSET = "offset";
	/** Destination address range - inclusive lower, exclusive upper */
	public static final String TRAFFIC_DEST_RANGE = "destinationRange";
	/** Seed for the app's random number generator */
	public static final String TRAFFIC_SEED = "seed";
	/** Size of the ping message */
	public static final String TRAFFIC_REQUEST_SIZE = "requestSize";
	/** Size of the pong message */
	public static final String TRAFFIC_REPLY_SIZE = "replySize";
	
	/** Application ID */
	public static final String APP_ID = "fi.tkk.netlab.PingApplication";
	
	// Private vars
	private double	lastRequest = 0;
	private double	interval = 500;
	private boolean passive = false;
	private boolean requestSent = false;
	private int		seed = 0;
	private int		destMin=0;
	private int		destMax=1;
	private int		requestSize=1;
	private int		replySize=1;
	private Random	rng;
	
	/** 
	 * Creates a new ping application with the given settings.
	 * 
	 * @param s	Settings to use for initializing the application.
	 */
	public TrafficApplication(Settings s) {
		if (s.contains(TRAFFIC_PASSIVE)){
			this.passive = s.getBoolean(TRAFFIC_PASSIVE);
		}
		if (s.contains(TRAFFIC_INTERVAL)){
			this.interval = s.getDouble(TRAFFIC_INTERVAL);
		}
		if (s.contains(TRAFFIC_OFFSET)){
			this.lastRequest = s.getDouble(TRAFFIC_OFFSET);
		}
		if (s.contains(TRAFFIC_SEED)){
			this.seed = s.getInt(TRAFFIC_SEED);
		}
		if (s.contains(TRAFFIC_REQUEST_SIZE)) {
			this.requestSize = s.getInt(TRAFFIC_REQUEST_SIZE);
		}
		if (s.contains(TRAFFIC_REPLY_SIZE)) {
			this.replySize = s.getInt(TRAFFIC_REPLY_SIZE);
		}
		if (s.contains(TRAFFIC_DEST_RANGE)){
			int[] destination = s.getCsvInts(TRAFFIC_DEST_RANGE,2);
			this.destMin = destination[0];
			this.destMax = destination[1];
		}
		
		rng = new Random(this.seed);
		super.setAppID(APP_ID);
	}
	
	/** 
	 * Copy-constructor
	 * 
	 * @param a
	 */
	public TrafficApplication(TrafficApplication a) {
		super(a);
		this.lastRequest = a.getlastRequest();
		this.interval = a.getInterval();
		this.passive = a.isPassive();
		this.destMax = a.getDestMax();
		this.destMin = a.getDestMin();
		this.seed = a.getSeed();
		this.replySize = a.getreplySize();
		this.requestSize = a.getrequestSize();
		this.rng = new Random(this.seed);
	}
	
	/** 
	 * Handles an incoming message. If the message is a ping message replies
	 * with a pong message. Generates events for ping and pong messages.
	 * 
	 * @param msg	message received by the router
	 * @param host	host to which the application instance is attached
	 */
	@Override
	public Message handle(Message msg, DTNHost host) {
		
		String type = (String)msg.getProperty("type");
		if (type==null) return msg; // Not a ping/pong message
		
		// Respond with pong if we're the recipient
		if (msg.getTo()==host && type.equalsIgnoreCase("req_coord")) {
			String id = "rep_coord" + "-" + SimClock.getIntTime() + ":" + 
					"myCoord=" + host.getLocation();
			Message m = new Message(host, msg.getFrom(), id, getreplySize());
			m.addProperty("type", "rep_coord");
			m.setAppID(APP_ID);
			host.createNewMessage(m);
			
			// Send event to listeners
			super.sendEventToListeners("GotPing", null, host);
			super.sendEventToListeners("SentPong", null, host);
		}
		
		// Received a pong reply
		if (msg.getTo()==host && type.equalsIgnoreCase("pong")) {
			// Send event to listeners
			super.sendEventToListeners("GotPong", null, host);
		}
		
		return msg;
	}

	/** 
	 * Draws a random host from the destination range
	 * 
	 * @return host
	 */
	private DTNHost randomHost() {
		int destaddr = 0;
		if (destMax == destMin) {
			destaddr = destMin;
		}
		destaddr = destMin + rng.nextInt(destMax - destMin);
		World w = SimScenario.getInstance().getWorld();
		return w.getNodeByAddress(destaddr);
	}
	
	@Override
	public Application replicate() {
		return new TrafficApplication(this);
	}

	/** 
	 * Sends a ping packet if this is an active application instance.
	 * 
	 * @param host to which the application instance is attached
	 */
	@Override
	public void update(DTNHost host) {
		//System.out.println(host.getConnections().size());
		//System.out.println(host.getConnections().get(0).isUp());
		try {
			
			if (host.getConnections().get(0).isUp()) {
				//if (this.passive) return;
				//double curTime = SimClock.getTime();
				//if (curTime - this.lastRequest >= this.interval) {
				
				// Time to send a new ping			
				//Message m = new Message(host, randomHost(), "ping" +
				//		SimClock.getIntTime() + "-" + host.getAddress() + host.getLocation(),
				//		getrequestSize());
				String id = "req_coord" + "-" + SimClock.getIntTime() + ":" + 
						"myCoord=" + host.getLocation();
				Message m = new Message(host, randomHost(), id, getrequestSize());	
				m.addProperty("type", "req_coord");
				m.setAppID(APP_ID);
				host.createNewMessage(m);
				
				// Call listeners
				super.sendEventToListeners("SentPing", null, host);
				
				//this.lastRequest = curTime;
			//}
			}
		}catch(Exception e) {
			//e.printStackTrace();
		}
	}

	/**
	 * @return the lastRequest
	 */
	public double getlastRequest() {
		return lastRequest;
	}

	/**
	 * @param lastRequest the lastRequest to set
	 */
	public void setlastRequest(double lastRequest) {
		this.lastRequest = lastRequest;
	}

	/**
	 * @return the interval
	 */
	public double getInterval() {
		return interval;
	}

	/**
	 * @param interval the interval to set
	 */
	public void setInterval(double interval) {
		this.interval = interval;
	}

	/**
	 * @return the passive
	 */
	public boolean isPassive() {
		return passive;
	}

	/**
	 * @param passive the passive to set
	 */
	public void setPassive(boolean passive) {
		this.passive = passive;
	}

	/**
	 * @return the destMin
	 */
	public int getDestMin() {
		return destMin;
	}

	/**
	 * @param destMin the destMin to set
	 */
	public void setDestMin(int destMin) {
		this.destMin = destMin;
	}

	/**
	 * @return the destMax
	 */
	public int getDestMax() {
		return destMax;
	}

	/**
	 * @param destMax the destMax to set
	 */
	public void setDestMax(int destMax) {
		this.destMax = destMax;
	}

	/**
	 * @return the seed
	 */
	public int getSeed() {
		return seed;
	}

	/**
	 * @param seed the seed to set
	 */
	public void setSeed(int seed) {
		this.seed = seed;
	}

	/**
	 * @return the replySize
	 */
	public int getreplySize() {
		return replySize;
	}

	/**
	 * @param replySize the replySize to set
	 */
	public void setreplySize(int replySize) {
		this.replySize = replySize;
	}

	/**
	 * @return the requestSize
	 */
	public int getrequestSize() {
		return requestSize;
	}

	/**
	 * @param requestSize the requestSize to set
	 */
	public void setrequestSize(int requestSize) {
		this.requestSize = requestSize;
	}

	public boolean isRequestSent() {
		return requestSent;
	}

	public void setRequestSent(boolean requestSent) {
		this.requestSent = requestSent;
	}

}
